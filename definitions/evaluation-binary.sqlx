config {
    type: "operations",
    schema: "search_api",
    name: "binary",
    tags: ["search-monthly"]
}

DECLARE
  PARTITIONTIME TIMESTAMP;

BEGIN TRANSACTION;

SET
  PARTITIONTIME = TIMESTAMP_TRUNC((CURRENT_TIMESTAMP()),MONTH);

-- Unpack URL parameters into an ARRAY<STRUCT<key STRING, value STRING>>
--
-- Test case:
-- SELECT UNPACK_PARAMS("https://www.gov.uk/search/all?key_and_value=foo&key_only") AS params
--
-- Output in JSON format should be:
-- [{
--   "params": [{
--     "key": "key_and_value",
--     "value": "foo"
--   }, {
--     "key": "key_only",
--     "value": null
--   }]
-- }]
CREATE TEMP FUNCTION UNPACK_PARAMS(url STRING) AS ((
  SELECT ARRAY_AGG(
    STRUCT(
      SPLIT(keyval, "=")[SAFE_ORDINAL(1)] AS key,
      SPLIT(keyval, "=")[SAFE_ORDINAL(2)] AS value
      )
  ) FROM UNNEST(REGEXP_EXTRACT_ALL(url, "[?&]([^&]+)")) AS keyval
));

DELETE
FROM
  automated_evaluation_input.binary
WHERE
  _PARTITIONTIME = PARTITIONTIME;

INSERT INTO automated_evaluation_input.binary (_PARTITIONTIME,
    queryEntry)
WITH
  events AS (
    SELECT
      CASE user_pseudo_id
        WHEN 'false' THEN CONCAT(user_pseudo_id, SAFE_CAST(ga_sessionid AS STRING))
        ELSE user_pseudo_id
      END AS userPseudoId,
      FORMAT_TIMESTAMP("%FT%TZ",TIMESTAMP_MICROS(event_timestamp)) AS eventTime,
      item_id AS link,
      item_content_id as id,
      search_term AS searchQuery
    FROM `ga4-analytics-352613.flattened_dataset.partitioned_flattened_events`
    WHERE
      event_name = 'select_item' AND
      item_list_name = 'Search' AND
      search_term IS NOT NULL AND
      NOT EXISTS (
        SELECT *
        FROM UNNEST(UNPACK_PARAMS(page_location))
        WHERE
          NOT (key IN ("keywords", "q", "parent", "fbclid")) AND -- allow these particular parameters
          NOT value IS NULL AND                                  -- allow parameters that have no value
          NOT (key = "order" AND value = "relevance") AND        -- allow the default order even when it has been explicitly requested
          NOT (key = "page" AND SAFE_CAST(value AS INT64) <= 10) -- allow clicks from the first 10 pages of search results
      ) AND
      search_term NOT LIKE "%[%]%" AND -- exclude queries that have been redacted, because they aren't literal queries
      event_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(),INTERVAL 3 MONTH),MONTH) AND DATE_TRUNC(CURRENT_DATE(),MONTH)
  ),
  grouped AS (
    SELECT
      MAX(events.searchQuery) AS query,
      MIN(events.link) AS link,
      MAX(events.id) AS id,
      COUNT(*) AS count
    FROM events
    GROUP BY CONCAT(events.searchQuery,events.id)
  ),
  filtered AS (
    SELECT
      query,
      link,
      count,
      count/SUM(count)
        OVER (
          PARTITION BY query
        ) AS ratio,
      SUM(count)
        OVER (
          PARTITION BY query
        ) AS total,
      id
    FROM grouped
  ),
  scored AS (
    SELECT *,
      CASE
        WHEN count>1 AND ratio>0.25 THEN 3
        WHEN count>1 AND ratio>0.025 THEN 2
        WHEN count>1 AND ratio>0.0005 THEN 1
        ELSE 0
      END AS score,
    FROM filtered
    WHERE total>50
  )
  SELECT
    PARTITIONTIME AS _PARTITIONTIME,
    STRUCT(
      query,
      [
        STRUCT(
          id AS uri,
          score
        )
      ] AS targets
    ) AS queryEntry
  FROM scored
  WHERE score>2
  ORDER BY total DESC, query, id
  LIMIT 1000;

COMMIT TRANSACTION;
