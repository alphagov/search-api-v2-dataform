config {
    type: "operations",
    schema: "search_api",
    name: "clickstream",
    tags: ["search-monthly"]
}

DECLARE
  PARTITIONTIME TIMESTAMP;

BEGIN TRANSACTION;

SET
  PARTITIONTIME = TIMESTAMP_TRUNC((CURRENT_TIMESTAMP()),MONTH);

DELETE
FROM
  automated_evaluation_input.clickstream
WHERE
  _PARTITIONTIME = PARTITIONTIME;

INSERT INTO automated_evaluation_input.clickstream
  WITH
  events AS (
    SELECT
      CASE user_pseudo_id
        WHEN 'false' THEN CONCAT(user_pseudo_id, SAFE_CAST(ga_sessionid AS STRING))
        ELSE user_pseudo_id
      END AS userPseudoId,
      FORMAT_TIMESTAMP("%FT%TZ",TIMESTAMP_MICROS(event_timestamp)) AS eventTime,
      item_id AS link,
      item_content_id as id,
      search_term AS searchQuery
    FROM `ga4-analytics-352613.flattened_dataset.partitioned_flattened_events`
    WHERE
      event_name = 'select_item' AND
      item_list_name = 'Search' AND
      search_term IS NOT NULL AND
      regexp_extract(page_location, "order=([a-zA-Z\\\\-]+)" ) IS NULL AND
      NOT EXISTS(SELECT * FROM UNNEST(REGEXP_EXTRACT_ALL(page_location, "[?&]([^=&]+)")) AS key WHERE key NOT IN ("page", "keywords", "q")) AND
      event_date BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE(),INTERVAL 3 MONTH),MONTH) AND DATE_TRUNC(CURRENT_DATE(),MONTH)
  ),
  grouped AS (
    SELECT
      MAX(events.searchQuery) AS query,
      MIN(events.link) AS link,
      MAX(events.id) AS id,
      COUNT(*) AS count
    FROM events
    GROUP BY CONCAT(events.searchQuery,events.id)
  ),
  filtered AS (
    SELECT
      query,
      link,
      count,
      count/SUM(count)
        OVER (
          PARTITION BY query
          ORDER BY count
          ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
        ) AS ratio,
      SUM(count)
        OVER (
          PARTITION BY query
          ORDER BY count
          ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
        ) AS total,
      id
    FROM grouped
  ),
  scored AS (
    SELECT *,
      CASE
        WHEN count>1 AND ratio>0.25 THEN 3
        WHEN count>1 AND ratio>0.025 THEN 2
        WHEN count>1 AND ratio>0.0005 THEN 1
        ELSE 0
      END AS score,
    FROM filtered
    WHERE total>50
  )
  SELECT
    PARTITIONTIME AS _PARTITIONTIME,
    STRUCT(
    query,
    ARRAY_AGG(
      STRUCT(
        id AS uri,
        score
      ) ORDER BY count DESC
    ) AS targets
    ) AS queryEntry
  FROM scored
  WHERE score>0
  GROUP BY query
  ORDER BY MAX(total) DESC
  LIMIT 1000

COMMIT TRANSACTION;
