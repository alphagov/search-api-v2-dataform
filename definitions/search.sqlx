config {
    type: "operations",
    schema: "search_api",
    name: "search",
    tags: ["search-daily"]
}

MERGE INTO
  `${dataform.projectConfig.vars.project_id}.analytics_events_vertex.search-event` T
USING
  (
  WITH
    events AS (
    SELECT
      TIMESTAMP_TRUNC(TIMESTAMP_MICROS(event_timestamp),DAY) AS eventDate,
      'search' AS eventType,
      CASE user_pseudo_id
        WHEN 'false' THEN CONCAT(user_pseudo_id, SAFE_CAST(ga_sessionid AS STRING))
        ELSE user_pseudo_id
      END AS userPseudoId,
      FORMAT_TIMESTAMP("%FT%TZ",TIMESTAMP_MICROS(event_timestamp)) AS eventTime,
      search_term AS searchQuery,
      SAFE_CAST(REGEXP_EXTRACT(page_location, "page=(\\\\d+)" ) AS int64)-1 AS `offset`,
      REGEXP_EXTRACT(page_location, "order=([a-zA-Z\\\\-]+)" ) AS orderBy,
      ARRAY_TO_STRING(REGEXP_EXTRACT_ALL(page_location, "((?:level_one_taxon|level_two_taxon|content_purpose_supergroup%5B%5D|public_timestamp%5Bfrom%5D|public_timestamp%5Bto%5D)=(?:%20&%20|[^&])*)" ), "&") AS FILTER,
      ab_test,
      item_content_id AS id,
      MAX(item_id),
      item.item_list_index
    FROM `ga4-analytics-352613.flattened_dataset.partitioned_flattened_events`
    WHERE
      event_date = DATE_TRUNC(DATE_SUB(CURRENT_DATE(),INTERVAL 1 DAY),DAY)
      AND publishing_app = "search-api"
      AND search_term IS NOT NULL
      AND event_name='view_item_list'
      AND (((SAFE_CAST(REGEXP_EXTRACT(page_location, "page=(\\\\d+)" ) AS int64)-1) <10)
        OR ((SAFE_CAST(REGEXP_EXTRACT(page_location, "page=(\\\\d+)" ) AS int64)-1) IS NULL))
    GROUP BY
      eventDate,
      eventTime,
      userPseudoId,
      eventType,
      searchQuery,
      `offset`,
      orderBy,
      id,
      item_list_index,
      FILTER,
      ab_test )
  SELECT
    eventDate AS _PARTITIONTIME,
    eventType,
    userPseudoId,
    eventTime,
    CASE
      WHEN `offset` IS NULL THEN STRUCT(searchQuery, CASE
        WHEN orderBy = "relevance" THEN NULL
        ELSE orderBy
    END
      AS orderBy,
      0 AS `offset`)
      ELSE STRUCT(searchQuery,
      CASE
        WHEN orderBy = "relevance" THEN NULL
        ELSE orderBy
    END
      AS orderBy,
      `offset`)
  END
    AS searchInfo,
    CASE
      WHEN FILTER = '' THEN NULL
      ELSE FILTER
  END
    AS FILTER,
    CASE
      WHEN ab_test IS NOT NULL THEN ARRAY[ab_test]
  END
    AS tagIds,
    ARRAY_AGG(STRUCT(id AS id,
        CAST(NULL AS string) AS name)
    ORDER BY
      SAFE_CAST(item_list_index AS INT64) ) AS documents
  FROM
    events
  WHERE
    id IS NOT NULL
    AND searchQuery IS NOT NULL
  GROUP BY
    eventDate,
    eventTime,
    userPseudoId,
    eventType,
    searchQuery,
    `offset`,
    orderBy,
    FILTER,
    ab_test) S
ON
  T._PARTITIONTIME = S._PARTITIONTIME
  AND T.eventType = S.eventType
  AND T.userPseudoId = S.userPseudoId
  AND T.eventTime = S.eventTime
  AND TO_JSON_STRING(T.documents) = TO_JSON_STRING(S.documents)
  AND TO_JSON_STRING(S.searchInfo) = TO_JSON_STRING(T.searchInfo)
  AND IFNULL(S.filter,"") = IFNULL(T.filter,"")
  WHEN NOT MATCHED
  THEN
INSERT
  (_PARTITIONTIME,
    eventType,
    userPseudoId,
    eventTime,
    searchInfo,
    FILTER,
    tagIds,
    documents)
VALUES
  (_PARTITIONTIME, eventType, userPseudoId, eventTime, searchInfo, FILTER, tagIds, documents)
